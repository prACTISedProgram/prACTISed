#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# practised_compensation.py unmasks ACTIS experimental signals in an
# Excel working file formatted for practised.py

# Copyright (C) 2022  Jessica Latimer

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import argparse
import pathlib
import sys
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from openpyxl import load_workbook
from openpyxl import Workbook
from openpyxl.utils import FORMULAE
from openpyxl.utils import get_column_letter, column_index_from_string
import math
from scipy import integrate, interpolate
from natsort import natsorted
import PySimpleGUI as sg

def compensate (fileName):

        d ={}

        data = pd.read_excel(fileName, engine='openpyxl')
        inputBook = load_workbook(fileName, data_only=True)
        idealSheet = inputBook["Inputs"]

        injectTime = idealSheet.cell(3,2).value
        numberOfConcs = idealSheet.cell(10,2).value
        normalConc = float(idealSheet.cell(14,2).value)
        unit = idealSheet.cell(1,5).value.partition(" ")[2]
        normalConc = "%s %s" % (normalConc, unit)
        compYN = str(idealSheet.cell(13,2).value)
        
        if compYN == 'Y':
                # Get dimensionless simulated separagram of pure protein, SÌƒp, and interpolate signals
                simulated = pd.read_excel(fileName, sheet_name='P_simulated', engine='openpyxl')
                

                # Interpolate signals from simulated protein profile
                timeSim = simulated['raw time']
                sigSim = simulated['signal']
                interp = interpolate.splrep(timeSim, sigSim)

                interest = timeSim[timeSim.between(0,60, inclusive='both')]
                if (interest.diff() > 1).any() == True:
                        sg.popup_ok('Warning: you may want to use a more refined mesh for the simulated protein profile', non_blocking=True)             

                # Isolate interrpolated signals at for times in raw data files
                rawData = pd.read_excel(fileName, sheet_name=normalConc, engine='openpyxl')
                rawData = rawData.dropna(how='all')
                rawTime = rawData['raw time']

                if timeSim.iloc[-1] < rawTime.iloc[-1]:
                        sg.popup_ok('prACTISed cancelled \n \nError: Simulated protein profile does not extend as long as experimental data times. \nPlease try again with a longer simulated protein profile file.')
                        return False    
                                
                interpSigs = interpolate.splev(rawTime, interp, der=0)

                # Normalize signals, remove negative values and generate data frame
                interpSigs = pd.Series(interpSigs, name='signal')
                interpSigs = interpSigs.div(max(interpSigs))
                interpSigs[interpSigs < 0] = 0
                simulatedSigs = pd.concat([rawTime,interpSigs], axis=1)

                # Get integrated signal of normalization concentration
                integratedNorm = []

                # Isolate first run of concentration used to normalize
                rawSignal = pd.read_excel(fileName, sheet_name=normalConc, engine='openpyxl')
                rawSignal = rawSignal.dropna(how='all')
                rawSignal = rawSignal.iloc[:,:2]

                time = rawSignal['raw time']
                sig = rawSignal[rawSignal.columns[1]]
                colName = str(rawSignal.columns[1])

                # Average the background signals for first 5 secs, subtract from all signals
                background = sig[time < injectTime].mean()
                rawSignal.iloc[:,1] = rawSignal.iloc[:,1].sub(background)

                # Multiply raw signal by Sp
                rawSignal.iloc[:,1] = rawSignal.iloc[:,1].mul(simulatedSigs.iloc[:,1])

                # Normalize and remove negative signals
                rawSignal.iloc[:,1] = rawSignal.iloc[:,1].mul(1)
                rawSignal.loc[(rawSignal[colName] < 0), colName] = 0
                normArea = rawSignal.iloc[:,1].sum()

                # Add concentration to dictionary
                d[normalConc]= rawSignal
                                

                # Apply Sp and normalization to all other concentrations and runs
                for x in range(1,int(numberOfConcs)+1):
                            
                        conc1 = str(idealSheet.cell(x,5).value)

                        # Read in all data for concentration
                        rawSignal = pd.read_excel(fileName, sheet_name=conc1, engine='openpyxl')
                        rawSignal = rawSignal.dropna(how='all')

                        time = rawSignal['raw time']
                        numberOfRuns = len(rawSignal.columns)

                        for run in range(1, int(numberOfRuns)):

                                # Skip normalization concentration run 1
                                if conc1.partition(" ")[0] != "%s" % normalConc or run != 1:

                                        sig = rawSignal[rawSignal.columns[run]]

                                        # Average the background signals for frist 5 secs, subtract from all signals
                                        background = sig[time < injectTime].mean()
                                        sig = sig.sub(background)

                                        # Multiply raw signal by Sp
                                        sig = sig.mul(simulatedSigs.iloc[:,1])

                                        # Normalize
                                        sigArea = sig.sum()
                                        sig = sig.mul(normArea)
                                        sig = sig.div(sigArea)
                                        sig[sig < 0] = 0

                                        # Add concentration to dictionary or append run to exisiting entry
                                        if run == 1:
                                                sig = pd.DataFrame(sig, columns=[rawSignal.columns[run]])
                                                sig.insert(0, "raw time", time)
                                                d[conc1]= sig

                                        else:
                                                d[conc1].insert(len(d[conc1].columns), rawSignal.columns[run], sig)
                        

                writer = pd.ExcelWriter(fileName, engine='openpyxl')
                writer.book = inputBook

                writer.sheets = dict((ws.title, ws) for ws in inputBook.worksheets)

                for y in d.keys():
                        d[y].to_excel(writer, sheet_name = y, index=False)

                simulatedSigs.to_excel(writer, sheet_name = 'P_simulated', index=False)

                idealSheet["B13"] = "Compensated"

                writer.save()
                writer.close()
                inputBook.save(fileName)
